import logging
from datetime import datetime
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import pytz

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CATEGORY, TITLE, DESCRIPTION, PHOTO, PRICE, CONTACT = range(6)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
SHOW_ALL = "show_all"
MY_ADS = "my_ads"
ADD_AD = "add_ad"
DELETE_AD = "delete_ad"
SEARCH_CAT = "search_cat"
CATEGORY_PREFIX = "cat_"

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
ADMIN_IDS = [6431899370]

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã —á–µ—Ä–µ–∑ pytz
timezone = pytz.timezone('Europe/Moscow')  # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ú–æ—Å–∫–≤—ã

# –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ JobQueue
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect('avito_bot.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS advertisements
        (id INTEGER PRIMARY KEY AUTOINCREMENT,
         user_id INTEGER,
         category TEXT,
         title TEXT,
         description TEXT,
         photo_id TEXT,
         price REAL,
         contact TEXT,
         created_at TIMESTAMP)
    ''')
    conn.commit()
    conn.close()

class AvitoBot:
    def __init__(self):
        self.categories = ["–¥–æ 1000—Ä", "–¥–æ 2000—Ä", "–¥–æ 3000—Ä", "–¥–æ 4000—Ä", "—Å–≤—ã—à–µ 4000"]

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=SHOW_ALL)],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=SEARCH_CAT)],
            [InlineKeyboardButton("üìù –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=MY_ADS)],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=ADD_AD)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–∏!\n–ü–æ –≤—á–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º @yatomatsu\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def show_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = []
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in self.categories:
            keyboard.append([InlineKeyboardButton(category, callback_data=f"{CATEGORY_PREFIX}{category}")])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            await update.callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
                reply_markup=reply_markup
            )

    async def show_category_ads(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
        conn = sqlite3.connect('avito_bot.db')
        c = conn.cursor()
        c.execute('SELECT * FROM advertisements WHERE category = ? ORDER BY created_at DESC', (category,))
        ads = c.fetchall()
        conn.close()

        if not ads:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            keyboard = [[InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=SEARCH_CAT)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.message.edit_text(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                reply_markup=reply_markup
            )
            return

        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await update.callback_query.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await update.callback_query.message.reply_text(f"üìÇ –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")

        for ad in ads:
            text = f"üìå {ad[3]}\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {ad[4]}\n" \
                   f"–¶–µ–Ω–∞: {ad[6]} ‚ÇΩ\n" \
                   f"–ö–æ–Ω—Ç–∞–∫—Ç: {ad[7]}"
            
            keyboard = []
            if update.callback_query.from_user.id in ADMIN_IDS or update.callback_query.from_user.id == ad[1]:
                keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"{DELETE_AD}_{ad[0]}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if ad == ads[-1]:
                keyboard.append([InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=SEARCH_CAT)])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            if ad[5]:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                await update.callback_query.message.reply_photo(
                    photo=ad[5],
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                await update.callback_query.message.reply_text(
                    text,
                    reply_markup=reply_markup
                )

    async def button_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == SHOW_ALL:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            await query.message.delete()
            await self.show_all_ads(update, context)
        elif query.data == MY_ADS:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            await query.message.delete()
            await self.show_my_ads(update, context)
        elif query.data == ADD_AD:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            await query.message.delete()
            return await self.start_add_ad(update, context)
        elif query.data == SEARCH_CAT:
            await self.show_categories(update, context)
        elif query.data.startswith(CATEGORY_PREFIX):
            category = query.data[len(CATEGORY_PREFIX):]
            await self.show_category_ads(update, context, category)
        elif query.data == "back_to_menu":
            keyboard = [
                [InlineKeyboardButton("üì¢ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=SHOW_ALL)],
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=SEARCH_CAT)],
                [InlineKeyboardButton("üìù –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=MY_ADS)],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=ADD_AD)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        elif query.data.startswith(DELETE_AD):
            ad_id = int(query.data.split('_')[2])
            await self.delete_ad(update, context, ad_id)

    async def show_all_ads(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        conn = sqlite3.connect('avito_bot.db')
        c = conn.cursor()
        c.execute('SELECT * FROM advertisements ORDER BY created_at DESC LIMIT 10')
        ads = c.fetchall()
        conn.close()

        if not ads:
            keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.message.reply_text(
                "–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=reply_markup
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await update.callback_query.message.reply_text("üì¢ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

        for ad in ads:
            text = f"üìå {ad[3]}\n" \
                   f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad[2]}\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {ad[4]}\n" \
                   f"–¶–µ–Ω–∞: {ad[6]} ‚ÇΩ\n" \
                   f"–ö–æ–Ω—Ç–∞–∫—Ç: {ad[7]}"
            
            keyboard = []
            if update.callback_query.from_user.id in ADMIN_IDS or update.callback_query.from_user.id == ad[1]:
                keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"{DELETE_AD}_{ad[0]}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if ad == ads[-1]:
                keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            if ad[5]:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                await update.callback_query.message.reply_photo(
                    photo=ad[5],
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                await update.callback_query.message.reply_text(
                    text,
                    reply_markup=reply_markup
                )

    async def show_my_ads(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.callback_query.from_user.id
        
        conn = sqlite3.connect('avito_bot.db')
        c = conn.cursor()
        c.execute('SELECT * FROM advertisements WHERE user_id = ? ORDER BY created_at DESC', (user_id,))
        ads = c.fetchall()
        conn.close()

        if not ads:
            keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                reply_markup=reply_markup
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await update.callback_query.message.reply_text("üìù –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

        for ad in ads:
            text = f"üìå {ad[3]}\n" \
                   f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad[2]}\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {ad[4]}\n" \
                   f"–¶–µ–Ω–∞: {ad[6]} ‚ÇΩ\n" \
                   f"–ö–æ–Ω—Ç–∞–∫—Ç: {ad[7]}"
            
            keyboard = [[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"{DELETE_AD}_{ad[0]}")]]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if ad == ads[-1]:
                keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if ad[5]:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                await update.callback_query.message.reply_photo(
                    photo=ad[5],
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                await update.callback_query.message.reply_text(
                    text,
                    reply_markup=reply_markup
                )

    async def start_add_ad(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[KeyboardButton(cat)] for cat in self.categories]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        return CATEGORY

    async def category_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['category'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        return TITLE

    async def title_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['title'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        return DESCRIPTION

    async def description_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['description'] = update.message.text
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        return PHOTO

    async def photo_sent(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        photo_file = await update.message.photo[-1].get_file()
        context.user_data['photo_id'] = photo_file.file_id
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return PRICE

    async def skip_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['photo_id'] = None
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return PRICE

    async def price_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            price = float(update.message.text)
            context.user_data['price'] = price
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):")
            return CONTACT
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
            return PRICE

    async def contact_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = context.user_data
        user_data['contact'] = update.message.text

        conn = sqlite3.connect('avito_bot.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO advertisements 
            (user_id, category, title, description, photo_id, price, contact, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            update.message.from_user.id,
            user_data['category'],
            user_data['title'],
            user_data['description'],
            user_data['photo_id'],
            user_data['price'],
            user_data['contact'],
            datetime.now()
        ))
        conn.commit()
        conn.close()

        await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=SHOW_ALL)],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=SEARCH_CAT)],
            [InlineKeyboardButton("üìù –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=MY_ADS)],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=ADD_AD)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
        
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=SHOW_ALL)],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=SEARCH_CAT)],
            [InlineKeyboardButton("üìù –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=MY_ADS)],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=ADD_AD)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    async def delete_ad(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ad_id: int):
        user_id = update.callback_query.from_user.id
        
        conn = sqlite3.connect('avito_bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        c.execute('SELECT user_id FROM advertisements WHERE id = ?', (ad_id,))
        result = c.fetchone()
        
        if result and (result[0] == user_id or user_id in ADMIN_IDS):
            c.execute('DELETE FROM advertisements WHERE id = ?', (ad_id,))
            conn.commit()
            await update.callback_query.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üì¢ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=SHOW_ALL)],
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=SEARCH_CAT)],
                [InlineKeyboardButton("üìù –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=MY_ADS)],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=ADD_AD)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!")
        
        conn.close()

def main():
    init_db()
    bot = AvitoBot()
    
    application = Application.builder().token("7699190840:AAFNgP1LxSKl1PdvUdlpVRxTXBN3XYkGSFQ").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(bot.start_add_ad, pattern=f"^{ADD_AD}$")],
        states={
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.category_selected)],
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.title_entered)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.description_entered)],
            PHOTO: [
                MessageHandler(filters.PHOTO, bot.photo_sent),
                CommandHandler("skip", bot.skip_photo)
            ],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.price_entered)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.contact_entered)]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)],
        per_message=False  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ False –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(bot.button_click))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()